# This workflow is triggered when a pull request is created for 'main' branch and performs a terraform plan so the 
# changes and be reviewed and approved before terraform apply workflow is executed for azure resource provisioning.
# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file.
# On pull request events, this workflow will run `terraform init`, `terraform workspace select`, `terraform fmt`, 
# `terraform validate` and `terraform plan`  
name: "Terraform plan"
on:
  push:
    branches:
      - master
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
     AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
     DEPLOYMENT_ENV: dev #(options are 'dev','test','prod') 
    steps:
        - name: "Checkout"
          uses: actions/checkout@master
          
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          
        - name: "Terraform Init"
          run: terraform init
 
        - name: 'Terraform Plan'
          run: terraform plan
      
          

    # Steps represent a sequence of tasks that will be executed as part of the job
 
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

    # Display the Pipeline activity to be performed
        - name: Windows VM Terraform Plan
          run: echo Windows VM Terraform Plan in respective environment

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token.
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
     
        - name: Login via Az module
          uses: azure/login@v1
          with:
               creds: ${{secrets.AZURE_CREDENTIALS}}
               enable-AzPSSession: true
      
    # Switch the terraform workspace to specific environment, for executing plan on respective state file.
        - name: Terraform switch to environment (dev, qa, prod) workspace
          run: terraform workspace select $DEPLOYMENT_ENV

    # Checks that all Terraform configuration files adhere to a canonical format
        - name: Terraform Format
          run: terraform fmt
    
    # Checks the correctioness of all Terraform files syntax
        - name: Terraform Validate
          run: terraform validate

    # Generate the report on what would be deployed using Terraform Plan on respective environment
        - name: Terraform Plan
          run: terraform plan -var-file $DEPLOYMENT_ENV/$DEPLOYMENT_ENV.tfvars -out=tfplan
    
